{"version":3,"sources":["Components/SearchCard.js","Components/InfoCard.js","Components/CardList.js","App.js","serviceWorker.js","index.js"],"names":["SearchCard","props","className","Card","CardHeader","CardBody","CardTitle","InputGroup","Input","onChange","this","onInputChange","placeholder","InputGroupAddon","addonType","Button","color","onClick","onButtonSubmit","Component","InfoCard","style","backgroundColor","data","trackName","artistName","CardSubtitle","collectionName","width","src","artworkUrl100","alt","collectionViewUrl","controls","name","previewUrl","type","CardLink","href","trackViewUrl","CardList","noResult","searchRes","CardComponent","map","cardItem","i","key","React","App","searchURL","state","searchTermEncoded","fetch","then","response","json","results","setState","event","encodeURI","target","value","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"wTA+BeA,E,qKAzBNC,GAAQ,IAAD,OACZ,OACE,yBAAKC,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,iCACb,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,2BACA,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,6DACA,6BACA,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAOC,SAAUC,KAAKT,MAAMU,cAAeC,YAAY,iCACvD,kBAACC,EAAA,EAAD,CAAiBC,UAAU,UACvB,kBAACC,EAAA,EAAD,CAAQC,MAAM,UAAUC,QAAS,kBAAM,EAAKhB,MAAMiB,mBAAlD,qB,GAfHC,a,gBC+BVC,EAhCE,SAACnB,GACd,OACI,yBAAKC,UAAU,aACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,iCAIX,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYiB,MAAO,CAACC,gBAAgB,OAAQN,MAAO,UAAWf,EAAMsB,KAAKC,WACzE,kBAACnB,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KAAYL,EAAMsB,KAAKE,YACvB,kBAACC,EAAA,EAAD,KAAezB,EAAMsB,KAAKI,iBAE9B,yBAAKzB,UAAU,eACX,yBAAKA,UAAU,cAAc0B,MAAM,MAAMC,IAAK5B,EAAMsB,KAAKO,cAAeC,IAAK9B,EAAMsB,KAAKS,qBAE5F,kBAAC3B,EAAA,EAAD,KACI,2BAAO4B,UAAQ,EAACC,KAAK,QAAQL,IAAK5B,EAAMsB,KAAKY,WAAYC,KAAK,gBAAsB,6BACpF,kBAACC,EAAA,EAAD,CAAUC,KAAMrC,EAAMsB,KAAKgB,cAA3B,wCAMR,iCCFLC,E,uKAtBD,IAAD,EACuB9B,KAAKT,MAA5BwC,EADA,EACAA,SAAUC,EADV,EACUA,UAETC,EAAgBD,EAAUE,KAAI,SAACC,EAASC,GAC1C,OAAO,kBAAC,EAAD,CAAUC,IAAKD,EAAGvB,KAAMmB,EAAUI,QAQ7C,OACI,6BACI,8BANM,IAAXL,EAAyB,wBAAIvC,UAAU,eAAd,+CACX,8BAORyC,O,GAjBMK,IAAM7B,WC2Cd8B,E,kDAzCb,aAAe,IAAD,8BACZ,gBASF/B,eAAiB,WACf,IAAMgC,EAAY,wCAA0C,EAAKC,MAAMC,kBAAoB,YAC3FC,MAAMH,GACDI,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAA/B,GACDA,EAAKkC,QAAQ,GACd,EAAKC,SAAS,CAAChB,UAAWnB,EAAKkC,QAAShB,UAAU,IAElD,EAAKiB,SAAS,CAAChB,UAAW,GAAID,UAAU,QAlBpC,EAyBd9B,cAAgB,SAACgD,GACf,EAAKD,SAAS,CAACN,kBAAmBQ,UAAUD,EAAME,OAAOC,UAxBzD,EAAKX,MAAQ,CACXC,kBAAkB,GAClBV,UAAW,GACXD,UAAU,GALA,E,qDA+BZ,OACE,6BACE,kBAAC,EAAD,CAAY9B,cAAeD,KAAKC,cAAeO,eAAgBR,KAAKQ,iBACpE,6BACA,kBAAC,EAAD,CAAUwB,UAAWhC,KAAKyC,MAAMT,UAAWD,SAAU/B,KAAKyC,MAAMV,gB,GApCtDtB,aCQE4C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5ff0114b.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Card, CardBody, CardTitle, CardHeader, Button } from 'reactstrap';\r\nimport { InputGroup, InputGroupAddon, Input } from 'reactstrap';\r\n\r\nclass SearchCard extends Component {\r\n  \r\n  render(props) {\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-7 offset-3 text-center\">\r\n            <Card>\r\n                <CardHeader>iTunes Song Search</CardHeader>\r\n                <CardBody>\r\n                    <CardTitle>Retrieve song details from iTunes' enormous database</CardTitle>\r\n                    <br></br>\r\n                    <InputGroup>\r\n                        <Input onChange={this.props.onInputChange} placeholder=\"Enter artist/song/album name\"/>\r\n                        <InputGroupAddon addonType=\"append\">\r\n                            <Button color=\"primary\" onClick={() => this.props.onButtonSubmit()}>Search</Button>\r\n                        </InputGroupAddon>\r\n                    </InputGroup>\r\n                </CardBody>\r\n            </Card>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchCard;","import React from 'react';\r\nimport { Card, CardBody, CardTitle, CardHeader, CardSubtitle, CardLink } from 'reactstrap';\r\n\r\nconst InfoCard = (props) => {\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                <div className=\"col-md-5 offset-4 text-center\">\r\n                    \r\n                {/*<Palette image={props.data.artworkUrl100}>\r\n                {palette => ( */}\r\n                    <Card>\r\n                        <CardHeader style={{backgroundColor:\"gray\", color: \"white\"}}>{props.data.trackName}</CardHeader>\r\n                        <CardBody>\r\n                            <CardTitle>{props.data.artistName}</CardTitle>\r\n                            <CardSubtitle>{props.data.collectionName}</CardSubtitle>\r\n                        </CardBody>\r\n                        <div className=\"text-center\">\r\n                            <img className=\"text-center\" width=\"50%\" src={props.data.artworkUrl100} alt={props.data.collectionViewUrl}></img>\r\n                        </div>\r\n                        <CardBody>\r\n                            <audio controls name=\"media\" src={props.data.previewUrl} type=\"audio/x-m4a\"></audio><br></br>\r\n                            <CardLink href={props.data.trackViewUrl}>Check out the full song on iTunes!</CardLink>\r\n                        </CardBody>\r\n                    </Card>\r\n                    \r\n                {/*})}\r\n                </Palette> */}\r\n                    <br></br>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default InfoCard;","import React from 'react';\r\nimport InfoCard from './InfoCard';\r\n\r\nclass CardList extends React.Component {\r\n    render() {   \r\n        let {noResult, searchRes} = this.props;\r\n\r\n        const CardComponent = searchRes.map((cardItem,i) => {\r\n            return <InfoCard key={i} data={searchRes[i]} />\r\n        })\r\n\r\n        const nores = () => {\r\n        if(noResult===true) {return <h5 className=\"text-center\">No results! Kindly revise your search term.</h5> }\r\n            else {return <div></div> }\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <hr></hr>\r\n                {nores()}\r\n                {CardComponent}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CardList;","import React, { Component } from 'react';\r\nimport SearchCard from './Components/SearchCard';\r\nimport CardList from './Components/CardList';\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      searchTermEncoded:\"\",\r\n      searchRes: [],\r\n      noResult: false\r\n    };\r\n  }\r\n  \r\n\r\n  onButtonSubmit = () => {\r\n    const searchURL = 'https://itunes.apple.com/search?term=' + this.state.searchTermEncoded + '&limit=10';\r\n    fetch(searchURL)\r\n        .then(response => response.json())\r\n        .then(data => {\r\n          if(data.results[0]) {\r\n            this.setState({searchRes: data.results, noResult: false})\r\n          } else {\r\n            this.setState({searchRes: [], noResult: true})\r\n          }\r\n        })\r\n  }\r\n\r\n  \r\n  \r\n  onInputChange = (event) => {\r\n    this.setState({searchTermEncoded: encodeURI(event.target.value)});\r\n  }\r\n  \r\n  \r\n  render() {\r\n    return (\r\n      <div>\r\n        <SearchCard onInputChange={this.onInputChange} onButtonSubmit={this.onButtonSubmit}/>\r\n        <br></br>\r\n        <CardList searchRes={this.state.searchRes} noResult={this.state.noResult} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}